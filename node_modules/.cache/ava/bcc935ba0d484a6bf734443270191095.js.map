{"version":3,"sources":["ftpUtils.js"],"names":["rewire","require","myModule","caesarsLoggerMock","log","a","b","c","d","sftpClient","connect","Promise","resolve","reject","put","buffer","fileName","get","filename","fs","existsSync","temp_dir","createWriteStream","file","__set__","t","contacts","JSON","parse","saveFileOnSFTPServer","sftpConnectionTestParameters","true","readFileFromSFTPServer"],"mappings":";;;;AAAA;;;;;;;;AAEA,IAAIA,SAASC,QAAQ,QAAR,CAAb;;AAEA,IAAIC,WAAWF,OAAO,sBAAP,CAAf;;AAEA,IAAIG,oBAAoB;AACpBC,SAAM,UAASC,CAAT,EAAWC,CAAX,EAAaC,CAAb,EAAeC,CAAf,EAAiB,CAAE;AADL,CAAxB;;AAIA,IAAIC,aAAa;;AAEbC,aAAU,UAASL,CAAT,EAAW;AACjB,eAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAACD;AAAU,SAA5C,CAAP;AACH,KAJY;AAKbE,SAAM,UAAUC,MAAV,EAAkBC,QAAlB,EAA2B;AAC7B,eAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAACD;AAAU,SAA5C,CAAP;AACH,KAPY;AAQbK,SAAM,UAASC,QAAT,EAAkB;AACpB,eAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAACD;AAAU,SAA5C,CAAP;AACH;AAVY,CAAjB;;AAaA,IAAIO,KAAK;AACLC,gBAAa,UAASC,QAAT,EAAkB;AAC3B,eAAO,IAAP;AACH,KAHI;AAILC,uBAAoB,UAASC,IAAT,EAAc;AAC9B,eAAO,IAAP;AACH;AANI,CAAT;;AASArB,SAASsB,OAAT,CAAiB,eAAjB,EAAkCrB,iBAAlC;AACAD,SAASsB,OAAT,CAAiB,YAAjB,EAA+Bf,UAA/B;AACAP,SAASsB,OAAT,CAAiB,IAAjB,EAAsBL,EAAtB;;AAEA,mBAAK,0BAAL;AAAA,iCAAiC,WAAMM,CAAN,EAAS;AACtC,YAAIC,WAAW,CAACC,KAAKC,KAAL,CAAW,kDAAX,CAAD,EAAgED,KAAKC,KAAL,CAAW,kDAAX,CAAhE,CAAf;AACA1B,iBAAS2B,oBAAT,CAA8BH,QAA9B,EAAuC,IAAvC,EAA4CxB,SAAS4B,4BAAT,EAA5C;AACAL,UAAEM,IAAF,CAAO,IAAP;AACH,KAJD;;AAAA;AAAA;AAAA;AAAA;;AAMA,mBAAK,4BAAL;AAAA,kCAAmC,WAAMN,CAAN,EAAU;AACzCvB,iBAAS8B,sBAAT,CAAgC,IAAhC,EAAqC9B,SAAS4B,4BAAT,EAArC,EAA8E,IAAI,UAASzB,CAAT,EAAW,CAAE,CAAjB,EAA9E;AACAoB,UAAEM,IAAF,CAAO,IAAP;AACH,KAHD;;AAAA;AAAA;AAAA;AAAA","file":"ftpUtils.js","sourcesContent":["import test from 'ava';\r\n\r\nvar rewire = require(\"rewire\");\r\n\r\nvar myModule = rewire(\"../utils/ftpUtils.js\");\r\n\r\nvar caesarsLoggerMock = {\r\n    log : function(a,b,c,d){}\r\n}\r\n\r\nvar sftpClient = {\r\n\r\n    connect : function(a){\r\n        return new Promise((resolve, reject) => {resolve()});\r\n    },\r\n    put : function (buffer, fileName){\r\n        return new Promise((resolve, reject) => {resolve()});\r\n    },\r\n    get : function(filename){\r\n        return new Promise((resolve, reject) => {resolve()});\r\n    }\r\n}\r\n\r\nvar fs = {\r\n    existsSync : function(temp_dir){\r\n        return true;\r\n    },\r\n    createWriteStream : function(file){\r\n        return null;\r\n    }\r\n}\r\n\r\nmyModule.__set__(\"caesarsLogger\", caesarsLoggerMock);\r\nmyModule.__set__(\"sftpClient\", sftpClient);\r\nmyModule.__set__(\"fs\",fs);\r\n\r\ntest('save File On SFTP Server', async t=>{\r\n    var contacts = [JSON.parse('{\"firstname\":\"nth offer\",\"lastname\":\"nth offer\"}'),JSON.parse('{\"firstname\":\"nth offer\",\"lastname\":\"nth offer\"}')];\r\n    myModule.saveFileOnSFTPServer(contacts,null,myModule.sftpConnectionTestParameters());\r\n    t.true(true);\r\n});\r\n\r\ntest('read File From SFTP Server', async t=> {\r\n    myModule.readFileFromSFTPServer(null,myModule.sftpConnectionTestParameters(), new function(a){})\r\n    t.true(true);\r\n})"]}